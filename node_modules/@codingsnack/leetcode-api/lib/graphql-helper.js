"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphQLHelper = void 0;
const graphql_request_1 = require("graphql-request");
const constants_1 = require("./constants");
class GraphQLHelper {
    constructor(csrfToken, session) {
        this.graphQLClient = this.initGraphQLClient(csrfToken, session);
    }
    initGraphQLClient(csrfToken, session) {
        return new graphql_request_1.GraphQLClient(constants_1.Constants.API_URL, {
            headers: {
                referer: constants_1.Constants.ENDPOINT,
                [constants_1.Constants.X_CSRFTOKEN_HEADER_KEY]: csrfToken,
                Cookie: this.generateCookie(csrfToken, session),
            },
        });
    }
    generateCookie(csrfToken, session) {
        return `csrftoken=${csrfToken};LEETCODE_SESSION=${session}`;
    }
    getProblem(titleSlug) {
        return __awaiter(this, void 0, void 0, function* () {
            const variables = { titleSlug };
            const query = (0, graphql_request_1.gql) `
      query questionData($titleSlug: String!) {
        question(titleSlug: $titleSlug) {
            ${GraphQLHelper.QUESTION_FIELDS}
        }
      }
    `;
            return yield this.graphQLClient.request(query, JSON.stringify(variables));
        });
    }
    getMyLists() {
        return __awaiter(this, void 0, void 0, function* () {
            const query = (0, graphql_request_1.gql) `
      query favoritesList {
        favoritesLists {
          allFavorites {
            idHash
            name
            description
            viewCount
            creator
            isWatched
            isPublicFavorite
            questions {
              questionId
              status
              title
              titleSlug
            }
          }
          watchedFavorites {
            idHash
            name
            description
            viewCount
            creator
            isWatched
            isPublicFavorite
            questions {
              questionId
              status
              title
              titleSlug
            }
          }
        }
      }
    `;
            return yield this.graphQLClient.request(query);
        });
    }
    getProblems(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { categorySlug = '', skip = 0, limit = 100, filters = {} } = params || {};
            const variables = { categorySlug, skip, limit, filters };
            const query = (0, graphql_request_1.gql) `
      query problemsetQuestionList($categorySlug: String, $limit: Int, $skip: Int, $filters: QuestionListFilterInput) {
        problemsetQuestionList: questionList(categorySlug: $categorySlug, limit: $limit, skip: $skip, filters: $filters) {
          total: totalNum
          questions: data {
            ${GraphQLHelper.QUESTION_FIELDS}
          }
        }
      }
    `;
            return yield this.graphQLClient.request(query, JSON.stringify(variables));
        });
    }
    getSubmissions(questionSlug) {
        return __awaiter(this, void 0, void 0, function* () {
            const variables = { offset: 0, limit: 100, lastKey: null, questionSlug };
            const query = (0, graphql_request_1.gql) `
      query Submissions($offset: Int!, $limit: Int!, $lastKey: String, $questionSlug: String!) {
        submissionList(offset: $offset, limit: $limit, lastKey: $lastKey, questionSlug: $questionSlug) {
          lastKey
          hasNext
          submissions {
            id
            statusDisplay
            lang
            runtime
            timestamp
            url
            isPending
            memory
          }
        }
      }
    `;
            return yield this.graphQLClient.request(query, JSON.stringify(variables));
        });
    }
    getRandomQuestion() {
        return __awaiter(this, void 0, void 0, function* () {
            const variables = { categorySlug: '', filters: {} };
            const query = (0, graphql_request_1.gql) `
      query randomQuestion($categorySlug: String, $filters: QuestionListFilterInput) {
        randomQuestion(categorySlug: $categorySlug, filters: $filters) {
          titleSlug
        }
      }
    `;
            return yield this.graphQLClient.request(query, JSON.stringify(variables));
        });
    }
    getProblemsByTag(tag) {
        return __awaiter(this, void 0, void 0, function* () {
            const variables = { slug: tag };
            const query = (0, graphql_request_1.gql) `
      query getTopicTag($slug: String!) {
        topicTag(slug: $slug) {
          name
          slug
          questions {
            ${GraphQLHelper.TAG_QUESTION_FIELDS}
          }
          frequencies
        }
      }
    `;
            return yield this.graphQLClient.request(query, JSON.stringify(variables));
        });
    }
    getProblemsByCompany(company) {
        return __awaiter(this, void 0, void 0, function* () {
            const variables = { slug: company };
            const query = (0, graphql_request_1.gql) `
      query getCompanyTag($slug: String!) {
        companyTag(slug: $slug) {
          name
          questions {
            ${GraphQLHelper.TAG_QUESTION_FIELDS}
          }
          frequencies
        }
      }
    `;
            return yield this.graphQLClient.request(query, JSON.stringify(variables));
        });
    }
}
exports.GraphQLHelper = GraphQLHelper;
GraphQLHelper.QUESTION_FIELDS = `
          questionId
          questionFrontendId
          title
          titleSlug
          content
          isPaidOnly
          difficulty
          likes
          dislikes
          isLiked
          similarQuestions
          exampleTestcases
          companyTagStats
          stats
          hints
          sampleTestCase
          acRate
          difficulty
          freqBar
          isFavor
          status
          topicTags {
            name
            id
            slug
          }
          hasSolution
          hasVideoSolution
    `;
GraphQLHelper.TAG_QUESTION_FIELDS = `
            status
            questionId
            freqBar
            questionFrontendId
            title
            titleSlug
            stats
            difficulty
            isPaidOnly
            topicTags {
              name
              slug
            }
            companyTags {
              name
              slug
            }
  `;
